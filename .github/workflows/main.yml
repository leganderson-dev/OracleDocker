name: Run MSSQL Container

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  FLYWAY_EMAIL: anderson.rangel@red-gate.com
  FLYWAY_TOKEN: iaDF3IS+rC5+U6mfk5MY62cH6KyDWWwktQCQUXZqOLIzBVi2WAfEFIYTRzq8zkMst0xyCli7L++Kw5RXdin/Uw==
  FLYWAY_IMAGE: redgate/flyway:latest

  FLYWAY_HOST: mssql
  FLYWAY_DATABASE: SSC_Dev
  FLYWAY_USER: sa
  FLYWAY_PASSWORD: YourStrong@Passw0rd
  FLYWAY_PORT: 1433
  FLYWAY_ENCRYPT: true
  FLYWAY_TRUST_CERT: true

  
jobs:
  run-mssql-container:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Docker version
      run: |
        docker --version
        docker info --format '{{.ServerVersion}}'

    - name: Clean up resources from previous jobs
      run: |
        docker system prune -f --volumes
        docker network prune -f

    - name: Create local container network
      run: |
        docker network create mssql-network || true

    - name: Start MSSQL service container
      run: |
        docker run -d --name mssql \
          --network mssql-network \
          -e "ACCEPT_EULA=Y" \
          -e "SA_PASSWORD=YourStrong@Passw0rd" \
          -e "MSSQL_PID=Express" \
          -p 1433:1433 \
          mcr.microsoft.com/mssql/server:2019-latest

    - name: Install sqlcmd
      run: |
        sudo apt-get update
        sudo apt-get install -y curl apt-transport-https gnupg
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: Wait for MSSQL to be ready
      run: |
        for i in {1..30}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q "SELECT 1" -b; then
            echo "MSSQL is up and running!"
            exit 0
          fi
          echo "MSSQL is starting, waiting 5 seconds before checking again (attempt $i/30)..."
          sleep 5
        done
        echo "MSSQL failed to start within timeout!" >&2
        docker logs mssql
        exit 1

    - name: Verify MSSQL is running
      run: |
        if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q "SELECT @@VERSION" -b; then
          echo "MSSQL is fully operational!"
        else
          echo "MSSQL verification failed!" >&2
          docker logs mssql
          exit 1
        fi

    - name: Run createdb.sql script
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -i createdb.sql -b
        echo "Successfully executed createdb.sql"

    - name: List all databases
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q "SELECT name FROM sys.databases" -b
        echo "Listed all databases"

    - name: Run Flyway migration on SSC_Dev
      run: |+
        docker run --rm --network mssql-network \
          -v "${{ github.workspace }}/migrations:/flyway/sql" \
          -v "${{ github.workspace }}:/flyway/conf:ro" \
          -v "${{ github.workspace }}/reports:/flyway/reports" \
          ${FLYWAY_IMAGE} \
          -url="jdbc:sqlserver://${FLYWAY_HOST}:${FLYWAY_PORT};databaseName=${FLYWAY_DATABASE};encrypt=${FLYWAY_ENCRYPT};trustServerCertificate=${FLYWAY_TRUST_CERT}" \
          -user="${FLYWAY_USER}" \
          -password="${FLYWAY_PASSWORD}" \
          -locations="filesystem:/flyway/sql" \
          -email="${FLYWAY_EMAIL}" \
          -token="${FLYWAY_TOKEN}" \
          auth -IAgreeToTheEula \
          -target="005.20250206193751" \
          info migrate info
          
        echo "Flyway migration completed for SSC_Dev"

    - name: Run Flyway Check
      run: |
        docker run --rm --network mssql-network \
          -v "${{ github.workspace }}/migrations:/flyway/sql" \
          -v "${{ github.workspace }}:/flyway/conf:ro" \
          -v "${{ github.workspace }}/schema-model:/flyway/schema-model" \
          -v "${{ github.workspace }}/reports:/flyway/reports" \
          ${FLYWAY_IMAGE} \
          -url="jdbc:sqlserver://${FLYWAY_HOST}:${FLYWAY_PORT};databaseName=${FLYWAY_DATABASE};encrypt=${FLYWAY_ENCRYPT};trustServerCertificate=${FLYWAY_TRUST_CERT}" \
          -user="${FLYWAY_USER}" \
          -password="${FLYWAY_PASSWORD}" \
          -locations="filesystem:/flyway/sql" \
          -email="${FLYWAY_EMAIL}" \
          -token="${FLYWAY_TOKEN}" \
          auth -IAgreeToTheEula \
          check -changes -code -drift -dryrun \
            -workingDirectory=/flyway \
            -schemaModelLocation=schema-model \
            -environment=${DEPLOY_ENVIRONMENT} \
            -check.buildEnvironment=Check \
            -reportFilename=reports/check-report-${{ github.run_number }}.html

    - name: Upload Flyway Check Report
      uses: actions/upload-artifact@v4
      with:
        name: flyway-check-${{ github.run_number }}
        path: "${{ github.workspace }}/reports/check-report-${{ github.run_number }}.html"